﻿
@page "/AddPurchaseOrder"
@using System.Net.Http
@using System.Net.Http.Json
@using ERP_API.Moduls
@using MudBlazor
@using MudBlazor.Components
@using UI_ERP.Reusable
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="container" id="container" style="background-color: #f0f0f0;">
    <div class="row rounded m-1">
        <div class="col-md-5">
            <h5>Purchase Order Details</h5>
        </div>
        <div class="col-md-4">
            <MudTextField @bind-Value="SearchValue" Placeholder="Search" Clearable="true" Adornment="Adornment.Start" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true"></MudTextField>
        </div>

        @* <div class="col-md-4"></div> *@
        <div class="col-md-3 d-flex justify-content-end">
            <MudTooltip Text="Add Purchase Order">
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Primary" Style="padding: 0px;" OnClick="OpenCreateDialog" />
            </MudTooltip>
        </div>
    </div>

    <MudTable Items="FilteredRawInwards" Hover="true" SortLabel="Sort By" Striped="true" RowsPerPage="25" Height="513px" Breakpoint="Breakpoint.Sm" Virtualize="true" FixedHeader="true" Dense="true"
              CustomHeader="true" CustomFooter="true" Bordered="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Class="displayTable">
        <HeaderContent>
            <MudTh>SL NO</MudTh>
            <MudTh>Po NO</MudTh>
            <MudTh>Po Date</MudTh>
            <MudTh>Vendor Name </MudTh>
            <MudTh>
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <span>View</span>
                    <span>Edit</span>
                    <span>Delete</span>
                </div>

            </MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd style="max-width: 100px;">@(PurOrders.IndexOf(context) + 1)</MudTd>
            <MudTd>@context.Pono</MudTd>
            <MudTd>@($"{context.Podate:yyyy-MM-dd}")</MudTd>
            
            <MudTd>@GetVendorName(context.VendId)</MudTd>
            
            <MudTd style="text-align: right;">
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <MudIconButton Icon="@Icons.Material.Outlined.Visibility" Size="Size.Small" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(async () => await OpenDialogForView(context.POId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OpenDialogForEdit(context.POId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Small" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => DeleteInwardMaterial(context.POId))" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private PurchaseorderCreateOnly Purchaseorder = new PurchaseorderCreateOnly();
    private List<PurchaseorderReadOnly> PurOrders { get; set; } = new List<PurchaseorderReadOnly>();


    private List<ItemReadOnlyDto> Items { get; set; } = new List<ItemReadOnlyDto>();

    private List<VendorReadOnlyDto> Vendors { get; set; } = new List<VendorReadOnlyDto>();

   // private List<StoreReadOnlyDto> Stores { get; set; } = new List<StoreReadOnlyDto>();
    
    //private List<CustomerReadOnlyDto> Customers { get; set; } = new List<CustomerReadOnlyDto>();
    //private List<UomReadOnlyDto> UOMs { get; set; } = new List<UomReadOnlyDto>();
    private List<PurchaseorderSubReadOnly> PurchaseorderSub { get; set; } = new List<PurchaseorderSubReadOnly>();
    private bool DialogVisible { get; set; } = false;
    private bool isViewMode { get; set; } = true;
    private string SearchValue { get; set; } = string.Empty;



    private string GetVendorName(int? vendId)
    {
        var item = Vendors.FirstOrDefault(i => i.VendId == vendId);
        return item?.VendName ?? string.Empty;
    }

  
    private DialogOptions FullScreenDialogOptions = new DialogOptions
        {
            FullScreen = true,
            CloseButton = true
        };
    protected override async Task OnInitializedAsync()
    {
        try
        {

            PurOrders = await HttpClient.GetFromJsonAsync<List<PurchaseorderReadOnly>>($"{Variable.API_URL}/api/Purchaseorders");

            PurOrders = PurOrders.OrderByDescending(po => po.POId).ToList();


            Items = await HttpClient.GetFromJsonAsync<List<ItemReadOnlyDto>>($"{Variable.API_URL}/api/Items");
            Vendors = await HttpClient.GetFromJsonAsync<List<VendorReadOnlyDto>>($"{Variable.API_URL}/api/Vendors");
           // Stores = await HttpClient.GetFromJsonAsync<List<StoreReadOnlyDto>>($"{Variable.API_URL}/api/Stores");

            //Customers = await HttpClient.GetFromJsonAsync<List<CustomerReadOnlyDto>>($"{Variable.API_URL}/api/Customers");
            //UOMs = await HttpClient.GetFromJsonAsync<List<UomReadOnlyDto>>($"{Variable.API_URL}/api/UnitOfMeasurements");
            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching data: {ex.Message}", Severity.Error);
        }
    }
    private IEnumerable<PurchaseorderReadOnly> FilteredRawInwards =>
       PurOrders?.Where(Purchaseorder =>
       string.IsNullOrWhiteSpace(SearchValue) ||
       (Purchaseorder.Pono?.Contains(SearchValue, StringComparison.OrdinalIgnoreCase) ?? false) ||
       (Purchaseorder.VendId.ToString().Contains(SearchValue, StringComparison.OrdinalIgnoreCase))
       ) ?? Enumerable.Empty<PurchaseorderReadOnly>();



    private async Task OpenCreateDialog()
    {
        Purchaseorder = new PurchaseorderCreateOnly();
        PurchaseorderSub = new List<PurchaseorderSubReadOnly>();
        isViewMode = false;
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["Purchaseorder"] = Purchaseorder,
                ["isViewMode"] = isViewMode,

                //["Stores"] = Stores,

                ["Vendors"] = Vendors,
                

                ["Items"] = Items,

                //["UOMs"] = UOMs,
                ["PurchaseorderSub"] = PurchaseorderSub,

            };
        var dialog = DialogService.Show<PurchaseorderDialog>("Create Purchase Order", dialogParameters, FullScreenDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await AddInwardMaterial();
        }
    }

    private async Task AddInwardMaterial()
    {
        try
        {
            Purchaseorder.PurchaseorderSubs = PurchaseorderSub;


            Console.WriteLine($"Sending Purchase Order: {System.Text.Json.JsonSerializer.Serialize(Purchaseorder)}");

            var response = await HttpClient.PostAsJsonAsync($"{Variable.API_URL}/api/Purchaseorders", Purchaseorder);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Purchase Order saved successfully", Severity.Success);
                DialogVisible = false;
                await ReloadInwardMaterials();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error response: {errorMessage}");
                Snackbar.Add($"Failed to save Purchase Order: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in AddInwardMaterial: {ex}");
            Snackbar.Add($"An error occurred while saving Purchase Order: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenDialogForView(int id)
    {
        isViewMode = true;
        await LoadInwardMaterialData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["Purchaseorder"] = Purchaseorder,
                ["isViewMode"] = isViewMode,
                ["Vendors"] = Vendors,
                //["Stores"] = Stores,
                ["Items"] = Items,
               
                //["UOMs"] = UOMs,
                ["PurchaseorderSub"] = PurchaseorderSub,


            };
        var dialog = DialogService.Show<PurchaseorderDialog>("View Purchase Order", dialogParameters, FullScreenDialogOptions);
        await dialog.Result;
    }

    private async Task OpenDialogForEdit(int id)
    {
        isViewMode = false;
        await LoadInwardMaterialData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["Purchaseorder"] = Purchaseorder,
                ["isViewMode"] = isViewMode,
                ["Vendors"] = Vendors,

                //["Stores"] = Stores,

                ["Items"] = Items,
                
                ["PurchaseorderSub"] = PurchaseorderSub,
            };
        var dialog = DialogService.Show<PurchaseorderDialog>("Edit Purchase Order", dialogParameters, FullScreenDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UpdateInwardMaterial();
        }
    }

    private async Task UpdateInwardMaterial()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"{Variable.API_URL}/api/Purchaseorders/{Purchaseorder.POId}", Purchaseorder);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Purchase Order updated successfully", Severity.Success);
                DialogVisible = false;
                await ReloadInwardMaterials();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update Purchase Order: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while updating Purchase Order: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadInwardMaterialData(int id)
    {
        try
        {
            var materialDto = await HttpClient.GetFromJsonAsync<PurchaseorderCreateOnly>($"{Variable.API_URL}/api/Purchaseorders/{id}");
            if (materialDto != null)
            {
                Purchaseorder = materialDto;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        try
        {
            var materialDto = await HttpClient.GetFromJsonAsync<PurchaseorderCreateOnly>($"{Variable.API_URL}/api/Purchaseorders/{id}");
            if (materialDto != null)
            {
                Purchaseorder = materialDto;

                if (materialDto.PurchaseorderSubs != null && materialDto.PurchaseorderSubs.Any())
                {
                    PurchaseorderSub = materialDto.PurchaseorderSubs.Where(item => item.POId == id).ToList();
                }
                else
                {
                    PurchaseorderSub = new List<PurchaseorderSubReadOnly>();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteInwardMaterial(int id)
    {
        try
        {
            bool? confirmDelete = await DialogService.ShowMessageBox(
                "Confirm Delete",
                "Are you sure you want to delete this Purchase Order?",
                yesText: "Delete",
                cancelText: "Cancel"
            );

            if (confirmDelete == true)
            {
                var response = await HttpClient.DeleteAsync($"{Variable.API_URL}/api/Purchaseorders/{id}");

                if (response.IsSuccessStatusCode)
                {
                    PurOrders.RemoveAll(b => b.POId == id);

                    await DialogService.ShowMessageBox(
                        "Success",
                        "Purchase Order deleted successfully.",
                        yesText: "OK"
                    );
                    await ReloadInwardMaterials();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await DialogService.ShowMessageBox(
                        "Error",
                        $"Failed to delete Purchase Order: {errorMessage}",
                        yesText: "OK"
                    );
                }
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(
                "Error",
                $"An error occurred while deleting Purchase Order: {ex.Message}",
                yesText: "OK"
            );
        }
    }

    private async Task ReloadInwardMaterials()
    {
        PurOrders = await HttpClient.GetFromJsonAsync<List<PurchaseorderReadOnly>>($"{Variable.API_URL}/api/Purchaseorders");
        StateHasChanged();
    }
}

<style>
    label {
        font-size: 1rem;
    }

    #container {
        padding: 15px;
        margin: 0px;
        max-width: 100%;
    }
</style>