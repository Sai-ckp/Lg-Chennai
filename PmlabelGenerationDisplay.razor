@page "/PmLabelGeneration"
@using System.Net.Http
@using System.Net.Http.Json
@using ERP_API.Moduls
@using MudBlazor
@using MudBlazor.Components
@using Serilog
@using UI_ERP.Reusable
@using System.Drawing
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using MessagingToolkit.QRCode.Codec
@inject IJSRuntime JSRuntime
@inject UserRightsService UserRightsService // this sholud add in every display page //



<div class="container" id="container" style="background-color: #f0f0f0;">
    <div class="row rounded m-1">
        <div class="col-md-5">
            <h5>Rm Label Generation Details</h5>
        </div>
        <div class="col-md-4">
            <MudTextField @bind-Value="SearchValue" Placeholder="Search" Clearable="true" Adornment="Adornment.Start" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true"></MudTextField>
        </div>

        <div class="col-md-3 d-flex justify-content-end">
            <MudTooltip Text="Add Label Generation">
                <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Size="MudBlazor.Size.Large" Color="MudBlazor.Color.Primary" Style="padding: 0px;" OnClick="OpenCreateDialog" Disabled="@(!CanAdd)" />
            </MudTooltip>
        </div>
    </div>

    <MudTable Items="FilteredLabels" Hover="true" SortLabel="Sort By" Striped="true" RowsPerPage="25" Height="513px" Breakpoint="Breakpoint.Sm" Virtualize="true" FixedHeader="true" Dense="true"
              CustomHeader="true" CustomFooter="true" Bordered="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered" Class="displayTable">
        <HeaderContent>
            <MudTh>SL NO</MudTh>
            <MudTh>Item Code</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Packing Qty</MudTh>
            <MudTh>No. of Packs</MudTh>
            <MudTh>Lot/Batch No</MudTh>
            <MudTh>Date of Mfg</MudTh>
            <MudTh>Date of Expiry</MudTh>
            <MudTh>
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <span>View</span>
                    <span>Edit</span>
                    <span>Delete</span>
                </div>

            </MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd style="max-width: 100px;">@(Labels.IndexOf(context) + 1)</MudTd>
            <MudTd>@GetItemCode(context.ItemId)</MudTd>
            <MudTh></MudTh>
            <MudTd>@context.PackingQty</MudTd>
            <MudTd>@context.NoOfBags</MudTd>
            <MudTd>@context.BatchNo</MudTd>
            <MudTd>@context.DateOfMfg</MudTd>
            <MudTd>@context.DateOfMfg</MudTd>

            @if (!string.IsNullOrEmpty(qrCodeImageData))
            {
                <MudImage Src="@qrCodeImageData" Alt="QR Code" Elevation="25" />
            }

            <MudTd style="text-align: right;">
                <div style="display: flex; justify-content: flex-end; gap: 12px;">
                    <MudIconButton Icon="@Icons.Material.Outlined.Visibility" Size="MudBlazor.Size.Small" Disabled="@(!CanView)" Variant="Variant.Filled" Color="MudBlazor.Color.Tertiary" OnClick="@(async () => await OpenDialogForView(context.PmLabelId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="MudBlazor.Size.Small" Disabled="@(!CanEdit)" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="@(async () => await OpenDialogForEdit(context.PmLabelId))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="MudBlazor.Size.Small" Disabled="@(!CanDelete)" Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" OnClick="@(() => DeleteInwardMaterial(context.PmLabelId))" />

                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private PmLabelGenerationCreateDto pmLabelGeneration = new PmLabelGenerationCreateDto();
    private List<PmLabelGenerationReadOnlyDto> Labels { get; set; } = new List<PmLabelGenerationReadOnlyDto>();


    private List<ItemReadOnlyDto> Items { get; set; } = new List<ItemReadOnlyDto>();

    private List<VendorReadOnlyDto> Vendors { get; set; } = new List<VendorReadOnlyDto>();

    //private List<StoreReadOnlyDto> Stores { get; set; } = new List<StoreReadOnlyDto>();
    //private List<PurchaseorderReadOnly> PurchaseOrders { get; set; } = new List<PurchaseorderReadOnly>();
    //private List<CustomerReadOnlyDto> Customers { get; set; } = new List<CustomerReadOnlyDto>();
    private List<UomReadOnlyDto> UOMs { get; set; } = new List<UomReadOnlyDto>();
    //private List<RawInwardMaterialSubReadOnlyDto> RawInwardMaterialSub { get; set; } = new List<RawInwardMaterialSubReadOnlyDto>();
    private bool DialogVisible { get; set; } = false;
    private bool isViewMode { get; set; } = true;
    private string SearchValue { get; set; } = string.Empty;
    private string qrCodeImageData = string.Empty;
    private bool isInwardEntryGenerated = false;
    private UserRightsViewModel userRights; //this also in every display page same place//

    private bool CanView => userRights?.CanView ?? false;
    private bool CanAdd => userRights?.CanAdd ?? false;
    private bool CanEdit => userRights?.CanEdit ?? false;
    private bool CanDelete => userRights?.CanDelete ?? false;

    // private async Task<IEnumerable<int?>> FilterItemCodes(string value, RawInwardMaterialSubReadOnlyDto currentItem)
    // {
    //     await Task.Delay(5);

    //     var filteredItemNames = Items.Where(i => i.CategoryCode == 2);

    //     if (string.IsNullOrEmpty(value))
    //         return filteredItemNames
    //             .OrderBy(p => p.ItemCode, StringComparer.OrdinalIgnoreCase)
    //             .Select(p => (int?)p.ItemId);

    //     return filteredItemNames
    //         .Where(p => p.ItemCode != null && p.ItemCode.Contains(value, StringComparison.InvariantCultureIgnoreCase))
    //         .OrderBy(p => p.ItemCode, StringComparer.OrdinalIgnoreCase)
    //         .Select(p => (int?)p.ItemId);
    // }

    private string GetItemCode(int? productId)
    {
        var filteredItemNames = Items.Where(i => i.CategoryId == 3);
        var item = filteredItemNames.FirstOrDefault(p => p.ItemId == productId);
        return item?.ItemCode ?? string.Empty;
    }
    private string GetVendorName(int? vendId)
    {
        var item = Vendors.FirstOrDefault(i => i.VendId == vendId);
        return item?.VendName ?? string.Empty;
    }
    private string GetMeasureName(int? ItemId)
    {
        var item = Items.FirstOrDefault(i => i.ItemId == ItemId);
        if (item != null)
        {
            var measurement = UOMs.FirstOrDefault(m => m.UomId == item.UomId);
            return measurement != null ? measurement.UomName : string.Empty;
        }
        return string.Empty;
    }

   
    private string GetItemName(int? Id)
    {
        var filteredItemNames = Items.Where(i => i.CategoryId == 3);
        var item = filteredItemNames.FirstOrDefault(p => p.ItemId == Id);
        return item?.ItemName ?? string.Empty;
    }





    
    private DialogOptions MediumDialogOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium, // Sets the maximum width to Medium
            CloseButton = true          // Enables the close button
        };
    protected override async Task OnInitializedAsync()
    {
        try
        {

            Labels = await HttpClient.GetFromJsonAsync<List<PmLabelGenerationReadOnlyDto>>($"{Variable.API_URL}/api/PmLabelGenerations");
            userRights = await UserRightsService.GetUserRights("pmLabelGeneration");//change that string when u copy for other //

            Labels = Labels.OrderByDescending(po => po.PmLabelId).ToList();




            Items = await HttpClient.GetFromJsonAsync<List<ItemReadOnlyDto>>($"{Variable.API_URL}/api/Items");
            Vendors = await HttpClient.GetFromJsonAsync<List<VendorReadOnlyDto>>($"{Variable.API_URL}/api/Vendors");
            //Stores = await HttpClient.GetFromJsonAsync<List<StoreReadOnlyDto>>($"{Variable.API_URL}/api/Stores");

            //Customers = await HttpClient.GetFromJsonAsync<List<CustomerReadOnlyDto>>($"{Variable.API_URL}/api/Customers");
            //UOMs = await HttpClient.GetFromJsonAsync<List<UomReadOnlyDto>>($"{Variable.API_URL}/api/UnitOfMeasurements");
            //PurchaseOrders = await HttpClient.GetFromJsonAsync<List<PurchaseorderReadOnly>>($"{Variable.API_URL}/api/Purchaseorders");

            // UOMs = await HttpClient.GetFromJsonAsync<List<UnitOfMeasureReadOnlyDto>>($"{Variable.API_URL}/api/UnitOfMeasures");

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching data: {ex.Message}", Severity.Error);
        }
    }
    private IEnumerable<PmLabelGenerationReadOnlyDto> FilteredLabels =>
       Labels?.Where(RmLabelGeneration =>
       string.IsNullOrWhiteSpace(SearchValue) ||
       (RmLabelGeneration.BatchNo?.Contains(SearchValue, StringComparison.OrdinalIgnoreCase) ?? false)

       ) ?? Enumerable.Empty<PmLabelGenerationReadOnlyDto>();



    private async Task OpenCreateDialog()
    {
        pmLabelGeneration = new PmLabelGenerationCreateDto();
        isViewMode = false;
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["pmLabelGeneration"] = pmLabelGeneration,
                ["isViewMode"] = isViewMode,
                ["Vendors"] = Vendors,
                ["Items"] = Items,
            };

        var dialog = DialogService.Show<PmLabelGenerationDialog>("Create Packing Material Label", dialogParameters, MediumDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Show confirmation dialog
            bool isConfirmed = await ShowConfirmationDialog("Confirm Add", "Are you sure you want to Save this label?");
            if (isConfirmed)
            {
                await AddInwardMaterial();
            }
            else
            {
                Snackbar.Add("Label addition canceled.", Severity.Info);
            }
        }
    }

    private async Task AddInwardMaterial()
    {
        try
        {
            Console.WriteLine($"Sending Packing Material: {System.Text.Json.JsonSerializer.Serialize(pmLabelGeneration)}");

            var response = await HttpClient.PostAsJsonAsync($"{Variable.API_URL}/api/PmLabelGenerations", pmLabelGeneration);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Packing Material saved successfully", Severity.Success);
                DialogVisible = false;
                await ReloadInwardMaterials();

                // Automatically open the view dialog for the newly added packing material
                var newLabel = await response.Content.ReadFromJsonAsync<PmLabelGenerationReadOnlyDto>();
                if (newLabel != null)
                {
                    await OpenDialogForView(newLabel.PmLabelId);
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error response: {errorMessage}");
                Snackbar.Add($"Failed to save Inward Material: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in AddInwardMaterial: {ex}");
            Snackbar.Add($"An error occurred while saving Inward Material: {ex.Message}", Severity.Error);
        }
    }

    private async Task<bool> ShowConfirmationDialog(string title, string message)
    {
        bool? result = await DialogService.ShowMessageBox(
            title,
            message,
            yesText: "Yes",
            cancelText: "No"
        );

        return result == true;
    }

    private async Task OpenDialogForView(int id)
    {
        isViewMode = true;
        await LoadInwardMaterialData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {
                ["pmLabelGeneration"] = pmLabelGeneration,
                ["isViewMode"] = isViewMode,
                ["Vendors"] = Vendors,
                ["Items"] = Items,


            };
        var dialog = DialogService.Show<PmLabelGenerationDialog>("View Raw Material Label", dialogParameters, MediumDialogOptions);
        await dialog.Result;
    }

    private async Task OpenDialogForEdit(int id)
    {
        isViewMode = false;
        await LoadInwardMaterialData(id);
        DialogVisible = true;

        var dialogParameters = new DialogParameters
            {

                ["isViewMode"] = isViewMode,
                ["Vendors"] = Vendors,
                ["Items"] = Items,
                ["pmLabelGeneration"] = pmLabelGeneration,

            };
        var dialog = DialogService.Show<PmLabelGenerationDialog>("Edit Raw Material Label", dialogParameters, MediumDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UpdateInwardMaterial();
        }
    }

    private async Task UpdateInwardMaterial()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"{Variable.API_URL}/api/PmLabelGenerations/{pmLabelGeneration.PmLabelId}", pmLabelGeneration);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Raw Material Label updated successfully", Severity.Success);
                DialogVisible = false;
                await ReloadInwardMaterials();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update Raw Material Label: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while updating Raq Material Label: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadInwardMaterialData(int id)
    {
        try
        {
            var materialDto = await HttpClient.GetFromJsonAsync<PmLabelGenerationCreateDto>($"{Variable.API_URL}/api/PmLabelGenerations/{id}");
            if (materialDto != null)
            {
                pmLabelGeneration = materialDto;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        try
        {
            var materialDto = await HttpClient.GetFromJsonAsync<PmLabelGenerationCreateDto>($"{Variable.API_URL}/api/PmLabelGenerations/{id}");
            if (materialDto != null)
            {
                pmLabelGeneration = materialDto;


            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteInwardMaterial(int id)
    {
        try
        {
            bool? confirmDelete = await DialogService.ShowMessageBox(
                "Confirm Delete",
                "Are you sure you want to delete this Inward Material?",
                yesText: "Delete",
                cancelText: "Cancel"
            );

            if (confirmDelete == true)
            {
                var response = await HttpClient.DeleteAsync($"{Variable.API_URL}/api/PmLabelGenerations/{id}");

                if (response.IsSuccessStatusCode)
                {
                    Labels.RemoveAll(b => b.PmLabelId == id);

                    await DialogService.ShowMessageBox(
                        "Success",
                        "Rm Label information deleted successfully.",
                        yesText: "OK"
                    );
                    await ReloadInwardMaterials();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await DialogService.ShowMessageBox(
                        "Error",
                        $"Failed to delete Inward Material: {errorMessage}",
                        yesText: "OK"
                    );
                }
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(
                "Error",
                $"An error occurred while deleting Inward Material: {ex.Message}",
                yesText: "OK"
            );
        }
    }

    private async Task ReloadInwardMaterials()
    {
        Labels = await HttpClient.GetFromJsonAsync<List<PmLabelGenerationReadOnlyDto>>($"{Variable.API_URL}/api/PmLabelGenerations");
        StateHasChanged();
    }
}

<style>
    label {
        font-size: 1rem;
    }

    #container {
        padding: 15px;
        margin: 0px;
        max-width: 100%;
    }
</style>
 